#!/bin/bash

DEFAULT_KARAF_MAVEN_ARGS="install -DskipTests -e"

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /tmp/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ -d /tmp/artifacts/ ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /tmp/artifacts/.m2 ${HOME}/.
  else 
    echo -n "Can't find saved artifacts. Ignoring..."
  fi
}

# echo error message and exit with error code
function error_exit() {
  echo $1
  if [ -z "$2" ]; then
    exit 1
  fi
  exit $2
}

# Source code provided to S2I is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p ${LOCAL_SOURCE_DIR}

# The dir that contains the build output
if [ -z "${OUTPUT_DIR}" ]; then
  OUTPUT_DIR="${LOCAL_SOURCE_DIR}/target"
elif [[ ${OUTPUT_DIR} != /* ]]; then
  OUTPUT_DIR="${LOCAL_SOURCE_DIR}/${OUTPUT_DIR}"
fi

# Output will result in /opt/jboss folder
DEPLOY_DIR=/opt/jboss
mkdir -p ${DEPLOY_DIR}

# Copy the source for compilation
cp -ad /tmp/src/* ${LOCAL_SOURCE_DIR}

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "${LOCAL_SOURCE_DIR}/pom.xml" ]; then

  # restore any maven dependencies which will be present if this is an
  # incremental build
  restore_saved_artifacts

  # copy source directory/.m2/settings.xml file
  CUSTOM_MAVEN_SETTINGS="${LOCAL_SOURCE_DIR}/.m2/settings.xml"
  if [ -f "${CUSTOM_MAVEN_SETTINGS}" ]; then
    echo "Using custom maven settings from ${CUSTOM_MAVEN_SETTINGS}..."
    cp "${CUSTOM_MAVEN_SETTINGS}" ~/.m2/settings.xml
  fi

  pushd ${LOCAL_SOURCE_DIR} &> /dev/null

  # set default maven args if not set
  if [ -z "${MAVEN_ARGS}" ]; then
    MAVEN_ARGS=${DEFAULT_KARAF_MAVEN_ARGS}
  fi

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn ${MAVEN_ARGS} ${MAVEN_DEBUG_ARGS}

  ERR=$?
  if [ ${ERR} -ne 0 ]; then
    error_exit "Aborting due to error code ${ERR} from mvn command" ${ERR}
  fi

  echo "Copying built artifacts from ${OUTPUT_DIR} into ${DEPLOY_DIR}..."
  popd &> /dev/null
else
  if [ -z "${OUTPUT_DIR}" ]; then
    OUTPUT_DIR="${LOCAL_SOURCE_DIR}"
  fi
  echo "Copying binaries in source directory into ${DEPLOY_DIR}..."
fi

# locate karaf assembly
if [ -z "${KARAF_ASSEMBLY}" ]; then
  if [ ! -d "${OUTPUT_DIR}" ]; then
    error_exit "Missing directory ${OUTPUT_DIR}"
  fi
  pushd ${OUTPUT_DIR} &> /dev/null
  # there should be only one *.tar.gz in ${OUTPUT_DIR}
  NUM_ARCHIVE_FILES=`ls -1 | grep "^.*.tar.gz$" | wc -l`
  if [ $NUM_ARCHIVE_FILES -ne 1 ]; then
    error_exit "Missing or more than one assembly archive file *.tar.gz in ${OUTPUT_DIR}"
  fi
  KARAF_ASSEMBLY=`ls -1 *.tar.gz`
  popd &> /dev/null
fi
KARAF_ASSEMBLY_ARCHIVE=${OUTPUT_DIR}/${KARAF_ASSEMBLY}
if [ ! -f "${KARAF_ASSEMBLY_ARCHIVE}" ]; then
  error_exit "Missing assembly archive file ${KARAF_ASSEMBLY_ARCHIVE}"
fi

# extract custom assembly to DEPLOY_DIR
tar xzf "$KARAF_ASSEMBLY_ARCHIVE" -C ${DEPLOY_DIR}
KARAF_ASSEMBLY_DIR=${KARAF_ASSEMBLY_ARCHIVE%.tar.gz}
ln -s "${DEPLOY_DIR}/${KARAF_ASSEMBLY_DIR##*/}" "${DEPLOY_DIR}/karaf"

# cleanup maven build artifacts to reduce image size
if [ -f "${LOCAL_SOURCE_DIR}/pom.xml" ]; then
  echo "Cleaning up maven build artifacts using mvn clean..."
  pushd ${LOCAL_SOURCE_DIR} &> /dev/null
  mvn clean
  popd
fi

# send log output to stdout
sed -i 's/^\(.*rootLogger.*\)out/\1stdout/' ${DEPLOY_DIR}/karaf/etc/org.ops4j.pax.logging.cfg

echo "...done!"
